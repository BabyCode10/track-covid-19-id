{"version":3,"sources":["components/Card.js","containers/Global.js","containers/Indonesia.js","containers/Search.js","App.js","serviceWorker.js","index.js"],"names":["card","title","children","count","updated","className","Global","state","cases","confirmend","recovered","deaths","lastUpdate","months","days","axios","get","then","data","confirmed","value","convertDate","Date","getTime","date","getDay","getDate","getMonth","getFullYear","setState","Card","Number","this","toLocaleString","toFixed","Component","Indonesia","Search","search","searchHandler","event","target","catch","error","type","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4edb474f.chunk.js","sourcesContent":["import React from 'react';\n\nconst card = ( { title, children, count, updated } ) => {\n  return(\n    <div className=\"w-full lg:w-1/3 p-1\">\n      <div className=\" bg-gray-800 rounded-md shadow-md p-5 h-40\">\n        <div className=\"text-gray-300\">\n          <span className=\"font-black text-4xl mr-2\">{ count }</span>\n\n          { children }\n          \n          <p className=\"font-semibold\">\n            { title }\n          </p>\n\n          <p className=\"font-semibold\">\n            updated: { updated }\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default card;","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\n\nimport Card from '../components/Card';\n\nclass Global extends Component {\n  state = {\n    cases: 0,\n    confirmend: 0,\n    recovered: 0,\n    deaths: 0,\n    lastUpdate: null,\n    months: [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ],\n    days: [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday'\n    ]\n  };\n\n  componentDidMount() {\n    axios.get('https://covid19.mathdro.id/api')\n      .then( ( { data } ) => {\n        const cases = data.confirmed.value;\n        const recovered = data.recovered.value;\n        const deaths = data.deaths.value;\n        const convertDate = new Date( data.lastUpdate ).getTime();\n        const date = new Date( convertDate );\n        const lastUpdate = `${ this.state.days[ date.getDay() ] }, ${ date.getDate() } ${ this.state.months[ date.getMonth() ] } ${ date.getFullYear() }`;\n\n        this.setState( { cases, recovered, deaths, lastUpdate } );\n      } );\n  };\n\n  render() {\n    return(\n      <Fragment>\n        <h1 className=\"text-4xl font-extrabold text-gray-800\">Global</h1>\n\n        <div className=\"flex flex-wrap items-center justify-center\">\n          <Card count={ Number(this.state.cases).toLocaleString() } title={ \"Cases\" } updated={ this.state.lastUpdate } />\n\n          <Card count={ Number(this.state.recovered).toLocaleString() } title={ \"Recovered\" } updated={ this.state.lastUpdate }>\n            <span className=\"bg-teal-600 text-gray-200 px-2 rounded-full text-sm\">\n              { ( this.state.recovered / this.state.cases * 100 ).toFixed( 1 ) }% Recovery Rate\n            </span>\n          </Card>\n\n          <Card count={ Number(this.state.deaths).toLocaleString() } title={ \"Deaths\" } updated={ this.state.lastUpdate }>\n            <span className=\"bg-pink-600 text-gray-200 px-2 rounded-full text-sm\">\n              { ( this.state.deaths / this.state.cases * 100 ).toFixed( 1 ) }% Fatality Rate\n            </span>\n          </Card>\n        </div>\n      </Fragment>\n    );\n  };\n};\n\nexport default Global;","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\n\nimport Card from '../components/Card';\n\nclass Indonesia extends Component {\n  state = {\n    cases: 0,\n    confirmend: 0,\n    recovered: 0,\n    deaths: 0,\n    lastUpdate: null,\n    months: [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ],\n    days: [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday'\n    ]\n  };\n\n  componentDidMount() {\n    axios.get('https://covid19.mathdro.id/api/countries/indonesia')\n      .then( ( { data } ) => {\n        const cases = data.confirmed.value;\n        const recovered = data.recovered.value;\n        const deaths = data.deaths.value;\n        const convertDate = new Date( data.lastUpdate ).getTime();\n        const date = new Date( convertDate );\n        const lastUpdate = `${ this.state.days[ date.getDay() ] }, ${ date.getDate() } ${ this.state.months[ date.getMonth() ] } ${ date.getFullYear() }`;\n\n        this.setState( { cases, recovered, deaths, lastUpdate } );\n      } );\n  };\n\n  render() {\n    return(\n      <Fragment>\n        <h1 className=\"text-4xl font-extrabold text-gray-800\">Indonesia</h1>\n\n        <div className=\"flex flex-wrap items-center justify-center\">\n          <Card count={ Number(this.state.cases).toLocaleString() } title={ \"Cases\" } updated={ this.state.lastUpdate } />\n\n          <Card count={ Number(this.state.recovered).toLocaleString() } title={ \"Recovered\" } updated={ this.state.lastUpdate }>\n            <span className=\"bg-teal-600 text-gray-200 px-2 rounded-full text-sm\">\n              { ( this.state.recovered / this.state.cases * 100 ).toFixed( 1 ) }% Recovery Rate\n            </span>\n          </Card>\n\n          <Card count={ Number(this.state.deaths).toLocaleString() } title={ \"Deaths\" } updated={ this.state.lastUpdate }>\n            <span className=\"bg-pink-600 text-gray-200 px-2 rounded-full text-sm\">\n              { ( this.state.deaths / this.state.cases * 100 ).toFixed( 1 ) }% Fatality Rate\n            </span>\n          </Card>\n        </div>\n      </Fragment>\n    );\n  };\n};\n\nexport default Indonesia;","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\n\nimport Card from '../components/Card';\n\nclass Search extends Component {\n  state = {\n    search: null,\n    data: null,\n    months: [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ],\n    days: [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday'\n    ]\n  };\n\n  searchHandler = event => {\n    if ( !event.target.value ) {\n      this.setState( { data: null } );\n    }\n\n    axios.get( `https://covid19.mathdro.id/api/countries/${ event.target.value }` )\n    .then( ( { data } ) => {\n      const cases = data.confirmed.value;\n      const recovered = data.recovered.value;\n      const deaths = data.deaths.value;\n      const convertDate = new Date( data.lastUpdate ).getTime();\n      const date = new Date( convertDate );\n      const lastUpdate = `${ this.state.days[ date.getDay() ] }, ${ date.getDate() } ${ this.state.months[ date.getMonth() ] } ${ date.getFullYear() }`;\n\n      this.setState( { data: { cases, recovered, deaths, lastUpdate } } );\n    })\n    .catch( ( error ) => {\n      // console.log(error);\n    });\n\n    this.setState( { search: event.target.value } );\n  };\n\n  render() {\n    return(\n      <Fragment>\n        <form className=\"w-full py-2 px-1\">\n          <div className=\"border-b-4 border-gray-800\">\n            <input className=\"bg-transparent border-none w-full text-gray-800 placeholder-gray-800 text-4xl font-extrabold focus:outline-none border-\" type=\"text\" placeholder=\"Search your country\" value={ this.state.search ?? \"\" } onChange={ this.searchHandler } />\n          </div>\n        </form>\n\n        { \n          this.state.data \n          ? \n          (\n            <div className=\"flex flex-wrap items-center justify-center\">\n              <Card count={ Number(this.state.data.cases).toLocaleString() } title={ \"Cases\" } updated={ this.state.data.lastUpdate } />\n\n              <Card count={ Number(this.state.data.recovered).toLocaleString() } title={ \"Recovered\" } updated={ this.state.data.lastUpdate }>\n                <span className=\"bg-teal-600 text-gray-200 px-2 rounded-full text-sm\">\n                  { ( this.state.data.recovered / this.state.data.cases * 100 ).toFixed( 1 ) }% Recovery Rate\n                </span>\n              </Card>\n\n              <Card count={ Number(this.state.data.deaths).toLocaleString() } title={ \"Deaths\" } updated={ this.state.data.lastUpdate }>\n                <span className=\"bg-pink-600 text-gray-200 px-2 rounded-full text-sm\">\n                  { ( this.state.data.deaths / this.state.data.cases * 100 ).toFixed( 1 ) }% Fatality Rate\n                </span>\n              </Card>\n            </div>\n          )\n          :\n          null\n        }\n      </Fragment>\n    );\n  };\n};\n\nexport default Search;","import React, { Component } from 'react';\n\nimport './assets/css/tailwind.css';\n\nimport Global from './containers/Global';\nimport Indonesia from './containers/Indonesia';\nimport Search from './containers/Search';\n\nclass App extends Component {\n  render() {\n    return(\n      <div className=\"container mx-auto\">\n        <h1 className=\"text-4xl font-extrabold text-pink-800\">Covid 19</h1>\n\n        <Global />\n\n        <Indonesia />\n\n        <Search />\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}